@startuml project_1

class Entity{
    - int kind;
    - Vector<Integer> position;
    - Rectangle shape;
    - boolean gothrough;
    + Entity();
    + boolean hit();
}

class Box{
    - isPulled;
    + Box();
    + void beMoved(Player player);
    + boolean hit(Vector<Entity> entities,int direction,int speed);
}

class Crystal{
    - pulled;
    + Crystal();
    + boolean hit(Vector<Entity> entity);
    + boolean pullTheBox(Vector<Entity> entity);

}

class Ground{
    + Ground();
}

class Wall{
    + Wall();
}

class Player{
    - int speed;
    - int direction;
    - boolean running;
    + move();
    + boolean hit(Vector<Entity> entities, Entity entity);
    + boolean hit(Vector<Entity> entities)
}


Wall --|> Entity
Box --|> Entity
Crystal --|> Entity
Ground --|> Entity
Player --|> Entity

class GameStateManager{
    + Vector<GameState> states;
    + GamePanel gamepanel;
    + {static} Font font_rainyHeart;
    + {static} Font font_bong;
    + GameStateManager();
    + update();
    + void render(Graphics2D g2);
    + void input(KeyHandler keyHandler);
    + void add State(GameState state);
    + void popState();
    + void popState(GameState gamestate);
}

GameStateManager *--GameState
GameStateManager *--GamePanel

abstract class  GameState{
    - GamePanel gamepanel;
    # i int counter;
    + {abstract} void intput(KeyHandler keyHandler);
    + {abstract} void render(Graphics2D g2);
    + {abstract} void update();
}

GameState *--GamePanel

class GameMenu{
    + BufferedImage background;
    + BufferedImage playerface;
    - int choice;
    - int counter;
    + GameMenu(GamePanel gamepanel);
    + void input(KeyHandler keyHandler);
    + void render(Graphics2D g2);
    + void update();
}

GameMenu <|--GameState

class GamePause{
    - - int counter;
    - - int choice;
    + GamePause(GamePanel gamepanel);
    + void input(KeyHandler keyHandler);
    + void render(Graphics2D g2);
    + void update();
}

GamePause <|-- GameState

class MapSelection{
    - int unlockmap;
    - int choice;
    - int counter;
    - BufferedImage background;
    + MapSelection(GamePanel gamepanel);
    + void input(KeyHandler keyHandler);
    + void render(Graphics2D g2);
    + void update();
}

MapSelection <|-- GameState

class PlayState{
    - Player player;
    - Map map;
    - MapRender mapRender;
    - PlayerRender playerRender;
    - Vector<Entity> entities;
    - Vector<Entity> crystals;
    - boolean music;
    + boolean checkWinning();
    + void input(KeyHandler keyHandler);
    + void render(Graphics2D g2);
    + void update();
}

PlayState <|-- GameState
PlayState *-- Entity
PlayState *--MapRender



class WinningState{
    - int counter;
    - int choice;
    + void input(KeyHandler keyHandler);
    + void render(Graphics2D g2);
    + void update();
}

WinningState <|-- GameState
class Map{
    - LoadMap loadMap;
    - String source;
    - BufferedImage minimap;
    - int x;
    - int y;
    - int nomap;
    - boolean done;
    + Map(String name,int x,int y, int nomap);
}

class MapManager{
    - Vector<Map> vectormap;
    - int currentmap;
    + MapManager();
    + void setUp();
    }
MapManager *-- Map

class Load{
    # String path;
    # Vector<Entity> entities;
    # Vector<Entity> crystals;
    # Vector<Integer> PlayerPosition;
    + Load(String path);
    + BufferedImage LoadImage();
    + BufferedImage LoadSubImage();
    + void LoadSound();
    + void LoadMap();
}

class LoadMap{
    # Load load;
    # Vector<Entity> mapplayer;
    + LoadMap(String path);
}

LoadMap *-- Load
Map *-- LoadMap

class KeyHandler implements KeyListener{
    - boolean key[];
    + KeyHandler();
    + keyTyped(KeyEvent e);
    + keyPressed(KeyEvent e);
    + KeyReleased();
    + boolean[] getkeypreses();
    }

class EntityRender extends Render{
    - BufferedImage image;
    + EntityRender(PlayState, image);
    + Render(Graphics2D g2, Entity entities);   
}

class MapRender extends Render{
    # Load loadimage;
    # BufferedImage tile[][];
    # Vector<Entity> layer;
    + MapRender(PlayState playstate);
    + void setUp();
    + Render(Graphics2D g2);
}

MapRender *-- Load
MapRender *-- Entity

class Render{
    - PlayState playState;
    + Render(PlayState playState);
}

Render *-- PlayState

class PlayerRender extends EntityRender{
    # Vector<Vector<BufferedImage>> playeractionimages;
    # Load loadimage;
    - int actionstate;
    + PlayerRender(playstate PlayState);
    + void setUp();
    + void render(Graphics2D g2);
}

PlayerRender *-- Load

class GameDataStore implements Serializable{
    + int mapunlock;
}

class SaveAndLoad{
    # GamePanel gamepanel;
    + SaveAndLoad(GamePanel gamepanel);
    + void save();
    + void load();
}
SaveAndLoad *-- GamePanel


class GamePanel extends JPanel implements Runnable{
    private final int originaltilesize = 64;
    private int scale;
    private int tilesize;
    private int screencol;
    private int screenrow;
    private int screenheight;
    private int screenwidth;
    private Thread gamethread;
    private KeyHandler keyhandler;
    private GameStateManager gamestatemanager;
    private MapManager MapManager;
    private GameDataStore gameDataStore;
    private SaveAndLoad saveandload;
    private Sound sound;
    private Sound sound1;
    public GamePanel();
    public void run();
    public void update();
    public void input();
    public void paintComponent(Graphics g);
    public void stopSoundEffect();
    public void stopSoundEffect(int i);
    public void playSound(int i);
    public void stopSoundEffect1();
    public void stopSoundEffect1(int i);
    public void playSound1(int i);
}

GamePanel *-- GameStateManager
GamePanel *-- Thread
GamePanel *-- MapManager
GamePanel *-- SaveAndLoad
GamePanel *-- KeyHandler
GamePanel *-- Sound

@enduml
